document.addEventListener("DOMContentLoaded", function () {
    var t = document.querySelector("body");
    document.querySelector("#cartDrawerIcon");
    const e = document.querySelector(".gamification-progress span"),
        s = document.querySelector(".gamification"),
        o = document.querySelector(".gamification-header");
    var n = {
        handleCartData: async () =>
            new Promise((t) => {
                setTimeout(() => {
                    t(
                        fetch("/cart.json")
                            .then((t) => t.json())
                            .then((t) => t)
                    );
                }, 700);
            }),
        handleCreateMessageAway: (t) => {
            var e = s.getAttribute("data-first-product-title"),
                a = s.getAttribute("data-second-product-title");
            let r = 0,
                n = "";
            t <= 100
                ? ((r = 100 - t), (n = `<p>You are <strong class="number-value" data-value="">$${r.toFixed(2)}</strong> away from <strong>free shipping</strong></p>`))
                : t <= 140
                ? ((r = 140 - t), (n = `<p>You are <strong class="number-value" data-value="">$${r.toFixed(2)}</strong> away from a free <strong>${e}</strong></p>`))
                : t <= 175
                ? ((r = 175 - t), (n = `<p>You are <strong class="number-value" data-value="">$${r.toFixed(2)}</strong> away from a free <strong>${a}</strong></p>`))
                : 175 < t && (n = "<p><strong>Congrats!</strong></p>"),
                (o.innerHTML = n);
        },
        handleUpdateCart: (t) => {
            jQuery.post(window.Shopify.routes.root + "cart/update.js", { updates: t }).done((t) => {
                $("body").trigger("added.ajaxProduct");
            });
        },
        handleGetProductsGift: (t) => {
            var e = parseInt(s.getAttribute("data-first-gift-id")),
                a = parseInt(s.getAttribute("data-second-gift-id")),
                r = { [e]: 0, [a]: 0 };
            140 <= t && t < 175 ? (r[e] = 1) : 175 <= t && ((r[e] = 1), (r[a] = 1)), n.handleUpdateCart(r);
        },
        handleBreakpoints: (e) => {
            var t = [0, 20, 50, 100, 140, 160, 175].findIndex((t) => e <= t);
            return 175 <= e ? 100 : [0, 3, 7, 9, 30, 50, 75, 100][t];
        },
        handleCompleteStep: (a) => {
            var t = [document.querySelector(".step:nth-child(1)"), document.querySelector(".step:nth-child(2)"), document.querySelector(".step:nth-child(3)")];
            t.forEach((t, e) => {
                (e = e), (175 <= a ? e < 3 : 140 <= a ? e < 2 : 100 <= a ? e < 1 : void 0) ? t.classList.add("complete") : t.classList.remove("complete");
            });
        },
        handleProgressBar: (t) => {
            e.style.width = t + "%";
        },
    };
    (t.onclick = async ({ target: t }) => {
        var e;
        (t.classList.contains("js-drawer-open-cart") ||
            t.classList.contains("btn-add-upsell-to-cart") ||
            t.classList.contains("add-to-cart") ||
            t.classList.contains("ajaxcart__product-remove") ||
            t.classList.contains("cart-link") ||
            t.classList.contains("js-qty__adjust--plus") ||
            t.classList.contains("js-qty__adjust--minus") ||
            t.classList.contains("btn--quick-atc")) &&
            ((e = (t = await n.handleCartData()).total_price / 100), n.handleGetProductsGift(e), 0 == t.total_price ? (s.style.display = "none") : (s.style.display = "block"), n.handleCreateMessageAway(e), (t = n.handleBreakpoints(e))) &&
            (n.handleProgressBar(t), n.handleCompleteStep(e));
    }),
        $("#CartContainer").on("change", ".js-qty__num", async function () {
            var t = await n.handleCartData(),
                e = t.total_price / 100,
                t = (n.handleGetProductsGift(e), 0 == t.total_price ? (s.style.display = "none") : (s.style.display = "block"), n.handleCreateMessageAway(e), n.handleBreakpoints(e));
            t && (n.handleProgressBar(t), n.handleCompleteStep(e));
        });

     const handleCartDrawer = async function (){
       console.clear();
       console.log('handleCartDrawer')
       var t = await n.handleCartData(),
                e = t.total_price / 100,
                t = (n.handleGetProductsGift(e), 0 == t.total_price ? (s.style.display = "none") : (s.style.display = "block"), n.handleCreateMessageAway(e), n.handleBreakpoints(e));
            t && (n.handleProgressBar(t), n.handleCompleteStep(e));
    }

       $("body").on("click", ".ajaxcart__product-remove", function (e) {
        e.preventDefault();
           let itemKey = $(this).data("item-key");
    theme.cart.changeItem(itemKey, 0).then(function () {
      $("body").trigger("added.ajaxProduct");
    });  

         handleCartDrawer()
         
      });

});
